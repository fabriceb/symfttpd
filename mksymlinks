#!/usr/bin/env php
<?php
/**
 * @author Laurent Bachelier <laurent@bachelier.name>
 */
require(dirname(__FILE__).'/lib/bootstrap.php');
require(dirname(__FILE__).'/lib/FileTools.php');
require(dirname(__FILE__).'/lib/MultiConfig.php');
require(dirname(__FILE__).'/lib/Symfony.php');
require(dirname(__FILE__).'/lib/Argument.php');
require(dirname(__FILE__).'/lib/Color.php');

/**
 * @pram string $project_path Absolute project path
 * @param string $target The destination of the symlink
 * @param string $link The relative path of the symlink to create
 * @param boolean $relative Try to use a relative destination
 * @return boolean Success
 *
 * @author Laurent Bachelier <laurent@bachelier.name>
 */
function replace_symlink($project_path, $target, $link, $relative = true)
{
  if ($relative)
  {
    $target = FileTools::calculateRelativeDir($project_path.'/'.$link, $target);
  }

  FileTools::mkdirs(dirname($project_path.'/'.$link));
  $success = FileTools::symlink($target, $project_path.'/'.$link);

  log_message('  '.$link.' => '.$target.($success ? '' : ' ...FAILED!'), !$success);
}


$options = MultiConfig::get();
$options['color'] = !Argument::get('C', 'no-color', false) && posix_isatty(STDOUT);
if ($options['color'])
{
  Color::enable();
}

$project_path = Symfony::getProjectPath();

log_message(Color::style('bright') . Color::fgColor('green')
  . 'Using symfony version ' . Color::style('normal')
  . Color::fgColor('yellow') . $options['want'] . Color::style('normal'));

$symlinks = array();
if ($options['genconf'])
{
  $symlinks[$options['genconf']] = $options['path'].'/genconf';
}

log_message(Color::style('bright') . Color::fgColor('green')
  . 'Creating required directories...' . Color::style('normal'));
FileTools::mkdirs($project_path.'/symfttpd/log');

log_message(Color::style('bright') . Color::fgColor('green')
  . 'Creating symbolic links...' . Color::style('normal'));
foreach ($symlinks as $link => $target)
{
  replace_symlink($project_path, $target, $link, $options['relative']);
}
